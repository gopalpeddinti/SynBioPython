{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SynBioPython Synbiopython will provide generic tools for Synthetic Biology. Installation To install the latest version from Github pip install --user git+https://github.com/Global-Biofoundries-Alliance/SynBioPython To install for development, clone the repository into the folder of your choice and install with: pip install --user -e . You should now be able to run this in Python: python import synbiopython print ( synbiopython . __version__ ) Contribute! SynBioPython is developed collectively by members of the Global Biofoundries Alliance and released on Github under the MIT license. Contributions are welcome!","title":"Home"},{"location":"#synbiopython","text":"Synbiopython will provide generic tools for Synthetic Biology.","title":"SynBioPython"},{"location":"#installation","text":"To install the latest version from Github pip install --user git+https://github.com/Global-Biofoundries-Alliance/SynBioPython To install for development, clone the repository into the folder of your choice and install with: pip install --user -e . You should now be able to run this in Python: python import synbiopython print ( synbiopython . __version__ )","title":"Installation"},{"location":"#contribute","text":"SynBioPython is developed collectively by members of the Global Biofoundries Alliance and released on Github under the MIT license. Contributions are welcome!","title":"Contribute!"},{"location":"CONTRIBUTING/","text":"Contributing to the Project: Please review the following guidelines in order to make the contribution process effective and easy for everyone. Get Started! Firstly, press the \"fork\" button in GitHub to create a copy of the repository in your own GitHub account. Now you need to clone locally using a terminal: $ git clone git@github.com:yourname/SynBioPython.git Change into the new local directory: cd SynBioPython Set up a new remote that points to the original project repository $ git remote add upstream git@github.com:Global-Biofoundries-Alliance/SynBioPython.git Put each piece of work on its own branch $ git checkout master $ git pull upstream master && git push origin master $ git checkout -b feature/Xfeature-update This creates branch from master then the pull command will sync our local copy with the upstream project. The git push will sync it to our forked GitHub project. Finally, create the new branch where you include your updated feature. When you're done with making changes, ensure that your changes pass both black and flake8 before committing your staged Python files. Black is the uncompromising Python Code Formatter. It will reformat your entire file in place according to the Black code style. Flake8 is a powerful tool that checks the code's compliance to PEP8. Here is the guideline to automate the process using pre-commits to include black code formatter and flake8 checker. a. Install pre-commit: pip install pre-commit b. Add pre-commit to requirements.txt c. Define .pre-commit-config.yaml with the hooks you may want to include. Below is a sample .pre-commit-config.yaml file: repos: - repo: https://github.com/ambv/black rev: stable hooks: - id: black language_version: python3.6 - repo: https://github.com/pre-commit/pre-commit-hooks rev: v1.2.3 hooks: - id: flake8 Here is .toml file for configuring black: [tool.black] line-length = 79 include = '\\.pyi?$' exclude = ''' /( \\.git | \\.hg | \\.mypy_cache | \\.tox | \\.venv | _build | buck-out | build | dist )/ ''' Below is the .flake8 configuration file: [flake8] ignore = E203, E266, E501, W503, F403, F401, C901 max-line-length = 79 max-complexity = 18 select = B,C,E,F,W,T4,B9 Note: Refer to this page for a complete guideline on how to use pre-commit hook to include Black and Flake8. d. Execute pre-commit install to install git hooks in your .git/ directory. pre-commit install To create a Pull Request (PR), you need to push your branch to the origin remote and press some buttons on GitHub. $ git push -u origin feature/Xfeature-update Navigate to your fork of the project at the browser, there will be a \"Compare & pull request\" button beside your new branch at the top. Press the button! This will link you to the original project repository. Press the \"Create pull request\" button at the bottom and wait for review by the maintainers. Feature Requests Feature requests are welcome. Please do so before submitting: * Check if the feature has already been requested. * Ensure your idea fits with the scope and aims of the project. * Please provide details (i.e. explaining the use case (merits of the feature)) Issue Tracker The issue tracker is the preferred channel for bug reports, and features requests, but please respect the following restrictions: Never use the issue tracker for personal support requests (use Stack Overflow ). Keep the discussion on topic and respect the opinions of others.","title":"Contributing"},{"location":"CONTRIBUTING/#contributing-to-the-project","text":"Please review the following guidelines in order to make the contribution process effective and easy for everyone.","title":"Contributing to the Project:"},{"location":"CONTRIBUTING/#get-started","text":"Firstly, press the \"fork\" button in GitHub to create a copy of the repository in your own GitHub account. Now you need to clone locally using a terminal: $ git clone git@github.com:yourname/SynBioPython.git Change into the new local directory: cd SynBioPython Set up a new remote that points to the original project repository $ git remote add upstream git@github.com:Global-Biofoundries-Alliance/SynBioPython.git Put each piece of work on its own branch $ git checkout master $ git pull upstream master && git push origin master $ git checkout -b feature/Xfeature-update This creates branch from master then the pull command will sync our local copy with the upstream project. The git push will sync it to our forked GitHub project. Finally, create the new branch where you include your updated feature. When you're done with making changes, ensure that your changes pass both black and flake8 before committing your staged Python files. Black is the uncompromising Python Code Formatter. It will reformat your entire file in place according to the Black code style. Flake8 is a powerful tool that checks the code's compliance to PEP8. Here is the guideline to automate the process using pre-commits to include black code formatter and flake8 checker. a. Install pre-commit: pip install pre-commit b. Add pre-commit to requirements.txt c. Define .pre-commit-config.yaml with the hooks you may want to include. Below is a sample .pre-commit-config.yaml file: repos: - repo: https://github.com/ambv/black rev: stable hooks: - id: black language_version: python3.6 - repo: https://github.com/pre-commit/pre-commit-hooks rev: v1.2.3 hooks: - id: flake8 Here is .toml file for configuring black: [tool.black] line-length = 79 include = '\\.pyi?$' exclude = ''' /( \\.git | \\.hg | \\.mypy_cache | \\.tox | \\.venv | _build | buck-out | build | dist )/ ''' Below is the .flake8 configuration file: [flake8] ignore = E203, E266, E501, W503, F403, F401, C901 max-line-length = 79 max-complexity = 18 select = B,C,E,F,W,T4,B9 Note: Refer to this page for a complete guideline on how to use pre-commit hook to include Black and Flake8. d. Execute pre-commit install to install git hooks in your .git/ directory. pre-commit install To create a Pull Request (PR), you need to push your branch to the origin remote and press some buttons on GitHub. $ git push -u origin feature/Xfeature-update Navigate to your fork of the project at the browser, there will be a \"Compare & pull request\" button beside your new branch at the top. Press the button! This will link you to the original project repository. Press the \"Create pull request\" button at the bottom and wait for review by the maintainers.","title":"Get Started!"},{"location":"CONTRIBUTING/#feature-requests","text":"Feature requests are welcome. Please do so before submitting: * Check if the feature has already been requested. * Ensure your idea fits with the scope and aims of the project. * Please provide details (i.e. explaining the use case (merits of the feature))","title":"Feature Requests"},{"location":"CONTRIBUTING/#issue-tracker","text":"The issue tracker is the preferred channel for bug reports, and features requests, but please respect the following restrictions: Never use the issue tracker for personal support requests (use Stack Overflow ). Keep the discussion on topic and respect the opinions of others.","title":"Issue Tracker"},{"location":"reference/synbiopython/","text":"Module synbiopython SynBioPython provides Python tools for Synthetic Biology. View Source \"\"\"SynBioPython provides Python tools for Synthetic Biology.\"\"\" from .version import __version__ Sub-modules synbiopython.codon synbiopython.genbabel synbiopython.lab_automation synbiopython.version","title":"Index"},{"location":"reference/synbiopython/#module-synbiopython","text":"SynBioPython provides Python tools for Synthetic Biology. View Source \"\"\"SynBioPython provides Python tools for Synthetic Biology.\"\"\" from .version import __version__","title":"Module synbiopython"},{"location":"reference/synbiopython/#sub-modules","text":"synbiopython.codon synbiopython.genbabel synbiopython.lab_automation synbiopython.version","title":"Sub-modules"},{"location":"reference/synbiopython/genbabel/","text":"Module synbiopython.genbabel View Source from .gensbolconv.GenSBOLconv import GenSBOLconv from .simplednaplot.SimpleDNAplot import SimpleDNAplot from .sbmlgen.SBMLgen import SBMLgen from .sedmlomexgen.SEDMLOMEXgen import SEDMLOMEXgen","title":"Genbabel"},{"location":"reference/synbiopython/genbabel/#module-synbiopythongenbabel","text":"View Source from .gensbolconv.GenSBOLconv import GenSBOLconv from .simplednaplot.SimpleDNAplot import SimpleDNAplot from .sbmlgen.SBMLgen import SBMLgen from .sedmlomexgen.SEDMLOMEXgen import SEDMLOMEXgen","title":"Module synbiopython.genbabel"},{"location":"reference/synbiopython/version/","text":"Module synbiopython.version View Source __version__ = \"0.0.1\"","title":"Version"},{"location":"reference/synbiopython/version/#module-synbiopythonversion","text":"View Source __version__ = \"0.0.1\"","title":"Module synbiopython.version"},{"location":"reference/synbiopython/codon/","text":"Module synbiopython.codon Synbiopython (c) Global BioFoundry Alliance 2020 Synbiopython is licensed under the MIT License. To view a copy of this license, visit http://opensource.org/licenses/MIT/ . @author: neilswainston View Source \"\"\" Synbiopython (c) Global BioFoundry Alliance 2020 Synbiopython is licensed under the MIT License. To view a copy of this license, visit <http://opensource.org/licenses/MIT/>. @author: neilswainston \"\"\" import os.path import pandas DATA_DIR = os . path . join ( os . path . dirname ( os . path . realpath ( __file__ )), \"data\" ) def _get_spec_df (): \"\"\"Get tax id, name from species.table as Pandas DataFrame.\"\"\" spec_tab_df = pandas . read_csv ( os . path . join ( DATA_DIR , \"species.table\" ), names = [ \"name\" , \"tax_id\" ], sep = \" \\t \" , comment = \"#\" , ) return spec_tab_df . set_index ( \"tax_id\" ) _SPEC_DF = _get_spec_df () def get_tax_id ( table_id ): \"\"\"Get tax id.\"\"\" table_id = str ( table_id ) if table_id in _SPEC_DF . index : return table_id tax_ids = _SPEC_DF . index [ _SPEC_DF [ \"name\" ] == table_id ] return None if tax_ids . empty else tax_ids [ 0 ] def get_name ( table_id ): \"\"\"Get name.\"\"\" tax_id = get_tax_id ( table_id ) return _SPEC_DF . loc [ tax_id , \"name\" ] if tax_id else None Sub-modules synbiopython.codon.table Variables DATA_DIR Functions get_name def get_name ( table_id ) Get name. View Source def get_name ( table_id ): \"\"\"Get name.\"\"\" tax_id = get_tax_id ( table_id ) return _SPEC_DF . loc [ tax_id , \"name\" ] if tax_id else None get_tax_id def get_tax_id ( table_id ) Get tax id. View Source def get_tax_id ( table_id ): \"\"\"Get tax id.\"\"\" table_id = str ( table_id ) if table_id in _SPEC_DF . index : return table_id tax_ids = _SPEC_DF . index [ _SPEC_DF [ \"name\" ] == table_id ] return None if tax_ids . empty else tax_ids [ 0 ]","title":"Index"},{"location":"reference/synbiopython/codon/#module-synbiopythoncodon","text":"Synbiopython (c) Global BioFoundry Alliance 2020 Synbiopython is licensed under the MIT License. To view a copy of this license, visit http://opensource.org/licenses/MIT/ . @author: neilswainston View Source \"\"\" Synbiopython (c) Global BioFoundry Alliance 2020 Synbiopython is licensed under the MIT License. To view a copy of this license, visit <http://opensource.org/licenses/MIT/>. @author: neilswainston \"\"\" import os.path import pandas DATA_DIR = os . path . join ( os . path . dirname ( os . path . realpath ( __file__ )), \"data\" ) def _get_spec_df (): \"\"\"Get tax id, name from species.table as Pandas DataFrame.\"\"\" spec_tab_df = pandas . read_csv ( os . path . join ( DATA_DIR , \"species.table\" ), names = [ \"name\" , \"tax_id\" ], sep = \" \\t \" , comment = \"#\" , ) return spec_tab_df . set_index ( \"tax_id\" ) _SPEC_DF = _get_spec_df () def get_tax_id ( table_id ): \"\"\"Get tax id.\"\"\" table_id = str ( table_id ) if table_id in _SPEC_DF . index : return table_id tax_ids = _SPEC_DF . index [ _SPEC_DF [ \"name\" ] == table_id ] return None if tax_ids . empty else tax_ids [ 0 ] def get_name ( table_id ): \"\"\"Get name.\"\"\" tax_id = get_tax_id ( table_id ) return _SPEC_DF . loc [ tax_id , \"name\" ] if tax_id else None","title":"Module synbiopython.codon"},{"location":"reference/synbiopython/codon/#sub-modules","text":"synbiopython.codon.table","title":"Sub-modules"},{"location":"reference/synbiopython/codon/#variables","text":"DATA_DIR","title":"Variables"},{"location":"reference/synbiopython/codon/#functions","text":"","title":"Functions"},{"location":"reference/synbiopython/codon/#get_name","text":"def get_name ( table_id ) Get name. View Source def get_name ( table_id ): \"\"\"Get name.\"\"\" tax_id = get_tax_id ( table_id ) return _SPEC_DF . loc [ tax_id , \"name\" ] if tax_id else None","title":"get_name"},{"location":"reference/synbiopython/codon/#get_tax_id","text":"def get_tax_id ( table_id ) Get tax id. View Source def get_tax_id ( table_id ): \"\"\"Get tax id.\"\"\" table_id = str ( table_id ) if table_id in _SPEC_DF . index : return table_id tax_ids = _SPEC_DF . index [ _SPEC_DF [ \"name\" ] == table_id ] return None if tax_ids . empty else tax_ids [ 0 ]","title":"get_tax_id"},{"location":"reference/synbiopython/codon/table/","text":"Module synbiopython.codon.table Synbiopython (c) Global BioFoundry Alliance 2020 Synbiopython is licensed under the MIT License. To view a copy of this license, visit http://opensource.org/licenses/MIT/ . @author: neilswainston View Source \"\"\" Synbiopython (c) Global BioFoundry Alliance 2020 Synbiopython is licensed under the MIT License. To view a copy of this license, visit <http://opensource.org/licenses/MIT/>. @author: neilswainston \"\"\" from collections import defaultdict import os.path import re from urllib.request import urlretrieve from synbiopython.codon import get_tax_id , DATA_DIR _CODON_REGEX = r \"([ATGCU]{3}) ([A-Z]|\\*) (\\d.\\d+)\" def get_table ( table_id , dna = True ): \"\"\"Get table.\"\"\" tax_id = get_tax_id ( table_id ) if tax_id : results = defaultdict ( dict ) content = _get_content ( tax_id ) for vals in sorted ( re . findall ( _CODON_REGEX , content ), key = lambda x : ( x [ 1 ], x [ 2 ]) ): results [ vals [ 1 ]][ _get_codon ( vals [ 0 ], dna )] = float ( vals [ 2 ]) return dict ( results ) return None def _get_content ( tax_id ): \"\"\"Get Kazusa content, either from cached file or remotely.\"\"\" target_file = os . path . join ( DATA_DIR , \" %s .txt\" % tax_id ) if not os . path . exists ( target_file ): url = ( \"http://www.kazusa.or.jp/codon/cgi-bin/showcodon.cgi?\" + \"aa=1&style=N&species= %s \" % tax_id ) urlretrieve ( url , target_file ) with open ( target_file ) as fle : return fle . read () def _get_codon ( codon , dna ): \"\"\"Get codon.\"\"\" return codon . replace ( \"U\" , \"T\" ) if dna else codon Variables DATA_DIR Functions get_table def get_table ( table_id , dna = True ) Get table. View Source def get_table ( table_id , dna = True ): \"\"\"Get table.\"\"\" tax_id = get_tax_id ( table_id ) if tax_id : results = defaultdict ( dict ) content = _get_content ( tax_id ) for vals in sorted ( re . findall ( _CODON_REGEX , content ), key = lambda x : ( x [ 1 ], x [ 2 ]) ): results [ vals [ 1 ]][ _get_codon ( vals [ 0 ], dna )] = float ( vals [ 2 ]) return dict ( results ) return None","title":"Table"},{"location":"reference/synbiopython/codon/table/#module-synbiopythoncodontable","text":"Synbiopython (c) Global BioFoundry Alliance 2020 Synbiopython is licensed under the MIT License. To view a copy of this license, visit http://opensource.org/licenses/MIT/ . @author: neilswainston View Source \"\"\" Synbiopython (c) Global BioFoundry Alliance 2020 Synbiopython is licensed under the MIT License. To view a copy of this license, visit <http://opensource.org/licenses/MIT/>. @author: neilswainston \"\"\" from collections import defaultdict import os.path import re from urllib.request import urlretrieve from synbiopython.codon import get_tax_id , DATA_DIR _CODON_REGEX = r \"([ATGCU]{3}) ([A-Z]|\\*) (\\d.\\d+)\" def get_table ( table_id , dna = True ): \"\"\"Get table.\"\"\" tax_id = get_tax_id ( table_id ) if tax_id : results = defaultdict ( dict ) content = _get_content ( tax_id ) for vals in sorted ( re . findall ( _CODON_REGEX , content ), key = lambda x : ( x [ 1 ], x [ 2 ]) ): results [ vals [ 1 ]][ _get_codon ( vals [ 0 ], dna )] = float ( vals [ 2 ]) return dict ( results ) return None def _get_content ( tax_id ): \"\"\"Get Kazusa content, either from cached file or remotely.\"\"\" target_file = os . path . join ( DATA_DIR , \" %s .txt\" % tax_id ) if not os . path . exists ( target_file ): url = ( \"http://www.kazusa.or.jp/codon/cgi-bin/showcodon.cgi?\" + \"aa=1&style=N&species= %s \" % tax_id ) urlretrieve ( url , target_file ) with open ( target_file ) as fle : return fle . read () def _get_codon ( codon , dna ): \"\"\"Get codon.\"\"\" return codon . replace ( \"U\" , \"T\" ) if dna else codon","title":"Module synbiopython.codon.table"},{"location":"reference/synbiopython/codon/table/#variables","text":"DATA_DIR","title":"Variables"},{"location":"reference/synbiopython/codon/table/#functions","text":"","title":"Functions"},{"location":"reference/synbiopython/codon/table/#get_table","text":"def get_table ( table_id , dna = True ) Get table. View Source def get_table ( table_id , dna = True ): \"\"\"Get table.\"\"\" tax_id = get_tax_id ( table_id ) if tax_id : results = defaultdict ( dict ) content = _get_content ( tax_id ) for vals in sorted ( re . findall ( _CODON_REGEX , content ), key = lambda x : ( x [ 1 ], x [ 2 ]) ): results [ vals [ 1 ]][ _get_codon ( vals [ 0 ], dna )] = float ( vals [ 2 ]) return dict ( results ) return None","title":"get_table"},{"location":"reference/synbiopython/lab_automation/","text":"Module synbiopython.lab_automation View Source from .containers.Plate import Plate from .Picklist.PickList import PickList , Transfer from .Picklist.Transfer import TransferError from .containers.builtin_containers import ( Plate96 , Plate384 , Plate1536 , Plate2x4 , Plate4ti0960 , Plate4ti0130 , PlateLabcyteEchoLp0200Ldv , PlateLabcyteEchoP05525Pp , Trough8x1 , ) Sub-modules synbiopython.lab_automation.tools","title":"Index"},{"location":"reference/synbiopython/lab_automation/#module-synbiopythonlab_automation","text":"View Source from .containers.Plate import Plate from .Picklist.PickList import PickList , Transfer from .Picklist.Transfer import TransferError from .containers.builtin_containers import ( Plate96 , Plate384 , Plate1536 , Plate2x4 , Plate4ti0960 , Plate4ti0130 , PlateLabcyteEchoLp0200Ldv , PlateLabcyteEchoP05525Pp , Trough8x1 , )","title":"Module synbiopython.lab_automation"},{"location":"reference/synbiopython/lab_automation/#sub-modules","text":"synbiopython.lab_automation.tools","title":"Sub-modules"},{"location":"reference/synbiopython/lab_automation/tools/","text":"Module synbiopython.lab_automation.tools Miscellaneous useful functions. In particular, methods for converting to and from plate coordinates. View Source \"\"\"Miscellaneous useful functions. In particular, methods for converting to and from plate coordinates. \"\"\" import numpy as np from collections import OrderedDict from fuzzywuzzy import process import re def round_at ( value , rounding = None ): \"\"\"Round value at the nearest rounding\"\"\" if rounding is None : return value else : return np . round ( value / rounding ) * rounding def dicts_to_columns ( dicts ): return { key : [ d [ key ] for d in dicts ] for key in dicts [ 0 ]} def replace_nans_in_dict ( dictionary , replace_by = \"null\" ): for key , value in dictionary . items (): if isinstance ( value , dict ): replace_nans_in_dict ( value , replace_by = replace_by ) elif value is np . nan : dictionary [ key ] = replace_by def human_seq_size ( n ): \"Return the given sequence as a human friendly 35b, 1.4k, 15k, etc.\" if n < 1000 : return \" %d b\" % n elif n < 10000 : return \" %.1f k\" % ( n / 1000 ) else : return \" %d k\" % np . round ( n / 1000 ) unit_factors = { prefix + unit : factor for unit in \"glL\" for prefix , factor in [( \"\" , 1 ), ( \"m\" , 1e-3 ), ( \"u\" , 1e-6 ), ( \"n\" , 1e-9 )] } volume_values_and_units = sorted ( [( value , unit ) for ( unit , value ) in unit_factors . items () if unit . endswith ( \"L\" )] ) def find_best_volume_unit ( vols ): med = np . median ( vols ) for value , unit in volume_values_and_units : if ( not unit . endswith ( \"g\" )) and ( med <= 999 * value ): return unit return unit def human_volume ( vol , unit = \"auto\" ): if unit == \"auto\" : unit = find_best_volume_unit ([ vol ]) vol = np . round ( vol / unit_factors [ unit ], 2 ) if int ( vol ) == vol : return \" %d %s \" % ( vol , unit ) else : return \" %s %s \" % (( \" %.02f \" % vol ) . rstrip ( \"0\" ), unit ) Variables unit_factors volume_values_and_units Functions dicts_to_columns def dicts_to_columns ( dicts ) View Source def dicts_to_columns ( dicts ) : return { key : [ d[key ] for d in dicts ] for key in dicts [ 0 ] } find_best_volume_unit def find_best_volume_unit ( vols ) View Source def find_best_volume_unit ( vols ): med = np . median ( vols ) for value , unit in volume_values_and_units : if ( not unit . endswith ( \"g\" )) and ( med <= 999 * value ): return unit return unit human_seq_size def human_seq_size ( n ) Return the given sequence as a human friendly 35b, 1.4k, 15k, etc. View Source def human_seq_size ( n ): \"Return the given sequence as a human friendly 35b, 1.4k, 15k, etc.\" if n < 1000 : return \"%db\" % n elif n < 10000 : return \"%.1fk\" % ( n / 1000 ) else : return \"%dk\" % np . round ( n / 1000 ) human_volume def human_volume ( vol , unit = 'auto' ) View Source def human_volume ( vol , unit = \"auto\" ) : if unit == \"auto\" : unit = find_best_volume_unit ( [ vol ] ) vol = np . round ( vol / unit_factors [ unit ] , 2 ) if int ( vol ) == vol : return \"%d %s\" % ( vol , unit ) else : return \"%s %s\" % (( \"%.02f\" % vol ). rstrip ( \"0\" ), unit ) replace_nans_in_dict def replace_nans_in_dict ( dictionary , replace_by = 'null' ) View Source def replace_nans_in_dict ( dictionary , replace_by = \"null\" ) : for key , value in dictionary . items () : if isinstance ( value , dict ) : replace_nans_in_dict ( value , replace_by = replace_by ) elif value is np . nan : dictionary [ key ] = replace_by round_at def round_at ( value , rounding = None ) Round value at the nearest rounding View Source def round_at ( value , rounding = None ): \"\"\"Round value at the nearest rounding\"\"\" if rounding is None : return value else : return np . round ( value / rounding ) * rounding","title":"Tools"},{"location":"reference/synbiopython/lab_automation/tools/#module-synbiopythonlab_automationtools","text":"Miscellaneous useful functions. In particular, methods for converting to and from plate coordinates. View Source \"\"\"Miscellaneous useful functions. In particular, methods for converting to and from plate coordinates. \"\"\" import numpy as np from collections import OrderedDict from fuzzywuzzy import process import re def round_at ( value , rounding = None ): \"\"\"Round value at the nearest rounding\"\"\" if rounding is None : return value else : return np . round ( value / rounding ) * rounding def dicts_to_columns ( dicts ): return { key : [ d [ key ] for d in dicts ] for key in dicts [ 0 ]} def replace_nans_in_dict ( dictionary , replace_by = \"null\" ): for key , value in dictionary . items (): if isinstance ( value , dict ): replace_nans_in_dict ( value , replace_by = replace_by ) elif value is np . nan : dictionary [ key ] = replace_by def human_seq_size ( n ): \"Return the given sequence as a human friendly 35b, 1.4k, 15k, etc.\" if n < 1000 : return \" %d b\" % n elif n < 10000 : return \" %.1f k\" % ( n / 1000 ) else : return \" %d k\" % np . round ( n / 1000 ) unit_factors = { prefix + unit : factor for unit in \"glL\" for prefix , factor in [( \"\" , 1 ), ( \"m\" , 1e-3 ), ( \"u\" , 1e-6 ), ( \"n\" , 1e-9 )] } volume_values_and_units = sorted ( [( value , unit ) for ( unit , value ) in unit_factors . items () if unit . endswith ( \"L\" )] ) def find_best_volume_unit ( vols ): med = np . median ( vols ) for value , unit in volume_values_and_units : if ( not unit . endswith ( \"g\" )) and ( med <= 999 * value ): return unit return unit def human_volume ( vol , unit = \"auto\" ): if unit == \"auto\" : unit = find_best_volume_unit ([ vol ]) vol = np . round ( vol / unit_factors [ unit ], 2 ) if int ( vol ) == vol : return \" %d %s \" % ( vol , unit ) else : return \" %s %s \" % (( \" %.02f \" % vol ) . rstrip ( \"0\" ), unit )","title":"Module synbiopython.lab_automation.tools"},{"location":"reference/synbiopython/lab_automation/tools/#variables","text":"unit_factors volume_values_and_units","title":"Variables"},{"location":"reference/synbiopython/lab_automation/tools/#functions","text":"","title":"Functions"},{"location":"reference/synbiopython/lab_automation/tools/#dicts_to_columns","text":"def dicts_to_columns ( dicts ) View Source def dicts_to_columns ( dicts ) : return { key : [ d[key ] for d in dicts ] for key in dicts [ 0 ] }","title":"dicts_to_columns"},{"location":"reference/synbiopython/lab_automation/tools/#find_best_volume_unit","text":"def find_best_volume_unit ( vols ) View Source def find_best_volume_unit ( vols ): med = np . median ( vols ) for value , unit in volume_values_and_units : if ( not unit . endswith ( \"g\" )) and ( med <= 999 * value ): return unit return unit","title":"find_best_volume_unit"},{"location":"reference/synbiopython/lab_automation/tools/#human_seq_size","text":"def human_seq_size ( n ) Return the given sequence as a human friendly 35b, 1.4k, 15k, etc. View Source def human_seq_size ( n ): \"Return the given sequence as a human friendly 35b, 1.4k, 15k, etc.\" if n < 1000 : return \"%db\" % n elif n < 10000 : return \"%.1fk\" % ( n / 1000 ) else : return \"%dk\" % np . round ( n / 1000 )","title":"human_seq_size"},{"location":"reference/synbiopython/lab_automation/tools/#human_volume","text":"def human_volume ( vol , unit = 'auto' ) View Source def human_volume ( vol , unit = \"auto\" ) : if unit == \"auto\" : unit = find_best_volume_unit ( [ vol ] ) vol = np . round ( vol / unit_factors [ unit ] , 2 ) if int ( vol ) == vol : return \"%d %s\" % ( vol , unit ) else : return \"%s %s\" % (( \"%.02f\" % vol ). rstrip ( \"0\" ), unit )","title":"human_volume"},{"location":"reference/synbiopython/lab_automation/tools/#replace_nans_in_dict","text":"def replace_nans_in_dict ( dictionary , replace_by = 'null' ) View Source def replace_nans_in_dict ( dictionary , replace_by = \"null\" ) : for key , value in dictionary . items () : if isinstance ( value , dict ) : replace_nans_in_dict ( value , replace_by = replace_by ) elif value is np . nan : dictionary [ key ] = replace_by","title":"replace_nans_in_dict"},{"location":"reference/synbiopython/lab_automation/tools/#round_at","text":"def round_at ( value , rounding = None ) Round value at the nearest rounding View Source def round_at ( value , rounding = None ): \"\"\"Round value at the nearest rounding\"\"\" if rounding is None : return value else : return np . round ( value / rounding ) * rounding","title":"round_at"}]}